#version 400

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 normalPosition_modelspace;

uniform mat4 M;
uniform mat4 V;
uniform mat4 P;
uniform vec3 lightPos;
uniform vec3 eyePos;
uniform float time;
uniform vec2 texOffset;
uniform float texScale;


// Output data ; will be interpolated for each fragment.
out vec3 worldPos;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec2 uv;

void main() {
    // Compute world position of vertex
    worldPos = (M * vec4(vertexPosition_modelspace, 1.0)).xyz;
    
    // Compute light direction from vertex to light source
    vec3 lightDir = normalize(lightPos - worldPos);
    
    // Compute V direction from vertex to eye position
    vec3 viewDir = normalize(eyePos - worldPos);
    
    // Compute UV coordinates that change over time
    uv = (worldPos.xz + texOffset + (time * 0.08)) / texScale;
    
    // Output vertex position in world coordinates
    gl_Position = P * V * vec4(worldPos, 1.0);

    vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
    EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

    vec3 LightPosition_cameraspace = ( V * vec4(lightPos,1)).xyz;
    LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

    Normal_cameraspace = ( V * M * vec4(normalPosition_modelspace,0)).xyz;

    
}




